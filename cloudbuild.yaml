steps:
  # Paso 1: Ejecutar tests
  - name: "golang:1.21-alpine"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        apk add --no-cache git
        go mod download
        go test ./... -v -coverprofile=coverage.out
        echo "Tests completados exitosamente"
    env:
      - "CGO_ENABLED=0"
      - "GOOS=linux"

  # Paso 2: Construir imagen Docker
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA"
      - "-t"
      - "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest"
      - "."

  # Paso 3: Subir imagen a Container Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA"

  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest"

  # Paso 4: Desplegar a producción (solo rama main/master)
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
          echo "Desplegando a producción..."
          
          # Preparar configuración
          cp deploy/cloudrun-production.yaml /tmp/cloudrun-config.yaml
          sed -i "s/PROJECT_ID/$PROJECT_ID/g" /tmp/cloudrun-config.yaml
          sed -i "s/it-integration-service:latest/${_SERVICE_NAME}:$COMMIT_SHA/g" /tmp/cloudrun-config.yaml
          
          # Desplegar
          gcloud run services replace /tmp/cloudrun-config.yaml \
            --region=${_REGION} \
            --quiet
          
          # Obtener URL del servicio
          SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
            --region=${_REGION} \
            --format="value(status.url)")
          
          echo "Servicio de producción desplegado en: $$SERVICE_URL"
          
          # Health check
          echo "Verificando servicio de producción..."
          sleep 30
          if curl -f "$$SERVICE_URL/api/v1/health" --max-time 10 --silent; then
            echo "✅ Health check de producción exitoso"
          else
            echo "⚠️ Warning: Health check de producción falló"
          fi
        else
          echo "No es rama main/master, saltando despliegue a producción"
        fi

  # Paso 5: Desplegar a staging (ramas que no sean main/master)
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [[ "$BRANCH_NAME" != "main" && "$BRANCH_NAME" != "master" ]]; then
          echo "Desplegando a staging..."
          
          # Preparar configuración
          cp deploy/cloudrun-staging.yaml /tmp/cloudrun-config.yaml
          sed -i "s/PROJECT_ID/$PROJECT_ID/g" /tmp/cloudrun-config.yaml
          sed -i "s/it-integration-service:latest/${_SERVICE_NAME}:$COMMIT_SHA/g" /tmp/cloudrun-config.yaml
          
          # Desplegar
          gcloud run services replace /tmp/cloudrun-config.yaml \
            --region=${_REGION} \
            --quiet
          
          # Obtener URL del servicio
          SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME}-staging \
            --region=${_REGION} \
            --format="value(status.url)")
          
          echo "Servicio de staging desplegado en: $$SERVICE_URL"
          
          # Health check
          echo "Verificando servicio de staging..."
          sleep 30
          if curl -f "$$SERVICE_URL/api/v1/health" --max-time 10 --silent; then
            echo "✅ Health check de staging exitoso"
          else
            echo "⚠️ Warning: Health check de staging falló"
          fi
        else
          echo "Es rama main/master, saltando despliegue a staging"
        fi

# Configuración de substituciones
substitutions:
  _SERVICE_NAME: "it-integration-service"
  _REGION: "us-east1"

# Opciones de build
options:
  # machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY
  env:
    - "DOCKER_BUILDKIT=1"

timeout: "1200s"
# Artifacts opcionales - crear bucket primero si es necesario
# artifacts:
#   objects:
#     location: 'gs://$PROJECT_ID-build-artifacts'
#     paths:
#       - 'coverage.out'
