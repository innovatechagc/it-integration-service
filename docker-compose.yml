services:
  # Aplicación principal
  app:
    build: .
    ports:
      - "8080:8080"  # Puerto principal para API y webhooks
    environment:
      - ENVIRONMENT=development
    env_file:
      - .env.local
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL local (opcional para desarrollo)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: microservice_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    restart: unless-stopped
    profiles:
      - local-db

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservice-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  microservice-network:
    driver: bridge